// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
}

enum EmergencyContactRelationship {
  SPOUSE
  PARENT
  SIBLING
  FRIEND
  OTHER
}

enum Department {
  ADMIN
  ENGINEERING
  SALES
  UI
  DEVELOPER
  OTHER
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  INTERN
  CONTRACT
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  role      Role     @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Employee {
  id                          String                           @id @default(uuid())
  supabaseId                  String                           @unique
  
  // Personal Information
  firstName                   String
  middleName                  String?
  lastName                    String
  dateOfBirth                 DateTime
  gender                      Gender
  maritalStatus               MaritalStatus
  contactNumber               String
  email                       String                           @unique
  emergencyContactName        String?
  emergencyContactRelationship EmergencyContactRelationship?
  emergencyContactPhone       String?
  currentAddress              String?
  permanentAddress            String?
  
  // Employment Information
  jobTitle                    String
  department                  Department
  departmentOther             String?                          // For "Other" department option
  employmentType              EmploymentType
  hireDate                    DateTime
  workLocation                String
  reportingManager            String?
  salaryGrade                 String?
  
  // Additional Information
  educationHistory            Json?                            // Array of education records
  certifications              Json?                            // Array of certifications
  skills                      String[]                         // Array of skills
  previousWorkExperience      Json?                            // Array of work experience
  bankAccountNumber           String?
  bankName                    String?
  bankBranch                  String?
  routingNumber               String?                          // IFSC Code or Routing Number
  
  // Metadata
  isActive                    Boolean                          @default(true)
  createdBy                   String?                          // Admin who created this employee
  createdAt                   DateTime                         @default(now())
  updatedAt                   DateTime                         @updatedAt
  
  // Indexes for performance
  @@index([supabaseId])
  @@index([email])
  @@index([department])
  @@index([employmentType])
  // Relations
  workflowInstances           WorkflowInstance[]
  @@index([isActive])
  @@map("employees")
}
// Onboarding Workflow Enums
enum TaskType {
  DOCUMENT_SUBMISSION
  TRAINING
  ORIENTATION
  EQUIPMENT_ALLOCATION
  SYSTEM_ACCESS
  MEETING
  REVIEW
  OTHER
}

enum AssigneeType {
  ADMIN
  MANAGER
  EMPLOYEE

}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
}

enum DurationUnit {
  HOURS
  DAYS
  WEEKS
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TaskInstanceStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  OVERDUE
  SKIPPED
  CANCELLED
}

enum WorkflowInstanceStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum ConditionType {
  EMPLOYEE_TYPE
  DEPARTMENT
  ROLE
  LOCATION
  HIRE_DATE
  CUSTOM
}

enum ConditionOperator {
  EQUALS
  NOT_EQUALS
  IN
  NOT_IN
  GREATER_THAN
  LESS_THAN
  CONTAINS
}

// Global Task Library
model GlobalTask {
  id                    String        @id @default(uuid())
  taskName              String
  taskType              TaskType
  description           String?
  detailedInstructions  String?
  priorityLevel         PriorityLevel @default(MEDIUM)
  duration              Int?          // Duration value
  durationUnit          DurationUnit? // Duration unit
  requiresApproval      Boolean       @default(false)
  assigneeType          AssigneeType
  approverType          AssigneeType?
  
  // Conditional Logic
  isConditional         Boolean       @default(false)
  conditionalLogic      Json?         // Condition rules
  
  // Resources and Organization
  resources             Json?         // Array of resources
  tags                  String[]      // Tags for categorization
  
  // Metadata
  isActive              Boolean       @default(true)
  createdBy             String?       // Admin who created this task
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  // Relations
  workflowTasks         WorkflowTask[]
  taskResources         TaskResource[]
  taskAnalytics         TaskAnalytics[]  
  @@index([taskType])
  @@index([assigneeType])
  @@index([isActive])
  @@map("global_tasks")
}

// Workflow Templates
model WorkflowTemplate {
  id                    String        @id @default(uuid())
  name                  String
  description           String?
  category              String?       // e.g., "Engineering", "Sales", "General"
  isDefault             Boolean       @default(false)
  
  // Template Configuration
  templateData          Json?         // Workflow structure and task assignments
  
  // Metadata
  isActive              Boolean       @default(true)
  createdBy             String?       // Admin who created this template
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  // Relations
  workflows             Workflow[]
  
  @@index([category])
  @@index([isActive])
  @@map("workflow_templates")
}

// Workflows
model Workflow {
  id                    String            @id @default(uuid())
  name                  String
  description           String?
  status                WorkflowStatus    @default(DRAFT)
  
  // Template Reference
  templateId            String?
  template              WorkflowTemplate? @relation(fields: [templateId], references: [id])
  
  // Workflow Configuration
  autoStart             Boolean           @default(false)
  estimatedDuration     Int?              // Total estimated duration in days
  
  // Conditional Application
  isConditional         Boolean           @default(false)
  conditionalLogic      Json?             // Rules for when this workflow applies
  
  // Metadata
  version               Int               @default(1)
  isActive              Boolean           @default(true)
  createdBy             String?           // Admin who created this workflow
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  // Relations
  workflowTasks         WorkflowTask[]
  workflowInstances     WorkflowInstance[]
  workflowAnalytics     WorkflowAnalytics[]
  
  @@index([status])
  @@index([isActive])
  @@index([templateId])
  @@map("workflows")
}

// Workflow Tasks (Tasks assigned to specific workflows)
model WorkflowTask {
  id                    String        @id @default(uuid())
  workflowId            String
  workflow              Workflow      @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  globalTaskId          String
  globalTask            GlobalTask    @relation(fields: [globalTaskId], references: [id])
  
  // Task Configuration in Workflow
  orderIndex            Int           // Order of task in workflow
  isRequired            Boolean       @default(true)
  deadlineDays          Int?          // Days from workflow start
  
  // Task Dependencies
  dependencies          String[]      // Array of WorkflowTask IDs that must be completed first
  
  // Custom Overrides (optional overrides of global task settings)
  customInstructions    String?       // Override global task instructions
  customDuration        Int?          // Override global task duration
  customDurationUnit    DurationUnit? // Override global task duration unit
  customAssigneeType    AssigneeType? // Override global task assignee
  customApproverType    AssigneeType? // Override global task approver
  
  // Metadata
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  // Relations
  taskInstances         TaskInstance[]
  
  @@unique([workflowId, globalTaskId]) // Prevent duplicate tasks in same workflow
  @@index([workflowId])
  @@index([globalTaskId])
  @@index([orderIndex])
  @@map("workflow_tasks")
}

// Workflow Instances (Per Employee)
model WorkflowInstance {
  id                    String                  @id @default(uuid())
  workflowId            String
  workflow              Workflow                @relation(fields: [workflowId], references: [id])
  
  employeeId            String
  employee              Employee                @relation(fields: [employeeId], references: [id])
  
  // Instance Status
  status                WorkflowInstanceStatus  @default(NOT_STARTED)
  progressPercentage    Decimal                 @default(0) @db.Decimal(5,2)
  
  // Timeline
  startedAt             DateTime?
  completedAt           DateTime?
  dueDate               DateTime?
  
  // Assignment
  assignedBy            String?                 // Admin/ADMIN who assigned this workflow
  
  // Metadata
  notes                 String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  // Relations
  taskInstances         TaskInstance[]
  
  @@unique([workflowId, employeeId]) // One workflow instance per employee
  @@index([employeeId])
  @@index([status])
  @@index([startedAt])
  @@map("workflow_instances")
}

// Task Instances (Per Employee Per Task)
model TaskInstance {
  id                    String              @id @default(uuid())
  workflowInstanceId    String
  workflowInstance      WorkflowInstance    @relation(fields: [workflowInstanceId], references: [id], onDelete: Cascade)
  
  workflowTaskId        String
  workflowTask          WorkflowTask        @relation(fields: [workflowTaskId], references: [id])
  
  // Task Assignment
  assignedTo            String?             // User ID of assigned person
  approvedBy            String?             // User ID of approver
  
  // Task Status
  status                TaskInstanceStatus  @default(NOT_STARTED)
  
  // Timeline
  dueDate               DateTime?
  startedAt             DateTime?
  completedAt           DateTime?
  approvedAt            DateTime?
  
  // Task Data
  completionNotes       String?
  approvalNotes         String?
  attachments           Json?               // Array of file references
  formData              Json?               // Form submission data
  
  // Metadata
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  @@unique([workflowInstanceId, workflowTaskId]) // One task instance per workflow instance
  @@index([assignedTo])
  @@index([status])
  @@index([dueDate])
  @@map("task_instances")
}

// Notification System
enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_OVERDUE
  WORKFLOW_ASSIGNED
  WORKFLOW_COMPLETED
  MANAGER_ASSIGNED
  APPROVAL_REQUIRED
  SYSTEM_ALERT
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

model Notification {
  id                    String              @id @default(uuid())
  
  // Notification Details
  type                  NotificationType
  title                 String
  message               String
  channel               NotificationChannel
  status                NotificationStatus  @default(PENDING)
  
  // Recipients
  recipientId           String              // User ID of recipient
  recipientEmail        String?             // Email for email notifications
  
  // Related Entities
  workflowInstanceId    String?
  taskInstanceId        String?
  employeeId            String?
  
  // Metadata
  data                  Json?               // Additional notification data
  sentAt                DateTime?
  deliveredAt           DateTime?
  readAt                DateTime?
  
  // Timestamps
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  @@index([recipientId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}

// Role Assignment Rules
model RoleAssignmentRule {
  id                    String              @id @default(uuid())
  
  // Rule Configuration
  name                  String
  description           String?
  isActive              Boolean             @default(true)
  priority              Int                 @default(0) // Higher priority rules are evaluated first
  
  // Conditions
  conditions            Json                // Array of conditions to match
  targetRole            Role                // Role to assign when conditions match
  
  // Metadata
  createdBy             String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  @@index([isActive])
  @@index([priority])
  @@map("role_assignment_rules")
}

// Document and Resource Management
enum ResourceType {
  DOCUMENT
  LINK
  VIDEO
  IMAGE
  FORM
  TOOL
  CONTACT
}

model TaskResource {
  id                    String              @id @default(uuid())
  
  // Resource Details
  name                  String
  description           String?
  type                  ResourceType
  url                   String?             // For links or file URLs
  filePath              String?             // For uploaded files
  fileName              String?             // Original file name
  fileSize              Int?                // File size in bytes
  mimeType              String?             // File MIME type
  
  // Metadata
  metadata              Json?               // Additional resource metadata
  isRequired            Boolean             @default(false)
  
  // Relations
  globalTaskId          String?
  globalTask            GlobalTask?         @relation(fields: [globalTaskId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  @@index([globalTaskId])
  @@index([type])
  @@map("task_resources")
}

// Analytics and Reporting
model WorkflowAnalytics {
  id                    String              @id @default(uuid())
  
  // Analytics Data
  workflowId            String
  workflow              Workflow            @relation(fields: [workflowId], references: [id])
  
  // Metrics
  totalInstances        Int                 @default(0)
  completedInstances    Int                 @default(0)
  averageCompletionTime Decimal?            @db.Decimal(10,2) // In hours
  averageTasksPerInstance Decimal?          @db.Decimal(10,2)
  
  // Time-based metrics
  reportDate            DateTime            @default(now())
  periodStart           DateTime
  periodEnd             DateTime
  
  // Additional metrics
  metricsData           Json?               // Detailed analytics data
  
  // Timestamps
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  @@unique([workflowId, reportDate])
  @@index([workflowId])
  @@index([reportDate])
  @@map("workflow_analytics")
}

model TaskAnalytics {
  id                    String              @id @default(uuid())
  
  // Analytics Data
  globalTaskId          String
  globalTask            GlobalTask          @relation(fields: [globalTaskId], references: [id])
  
  // Metrics
  totalAssignments      Int                 @default(0)
  completedAssignments  Int                 @default(0)
  averageCompletionTime Decimal?            @db.Decimal(10,2) // In hours
  overdueTasks          Int                 @default(0)
  
  // Time-based metrics
  reportDate            DateTime            @default(now())
  periodStart           DateTime
  periodEnd             DateTime
  
  // Additional metrics
  metricsData           Json?               // Detailed analytics data
  
  // Timestamps
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  @@unique([globalTaskId, reportDate])
  @@index([globalTaskId])
  @@index([reportDate])
  @@map("task_analytics")
}
